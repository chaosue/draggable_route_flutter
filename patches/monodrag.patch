--- .fvm/flutter_sdk/packages/flutter/lib/src/gestures/monodrag.dart	2024-09-30 12:00:41.552156433 +0300
+++ lib/src/gestures/monodrag.dart	2024-10-02 20:17:44.629107030 +0300
@@ -2,32 +2,19 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-/// @docImport 'package:flutter/widgets.dart';
-///
-/// @docImport 'multidrag.dart';
 library;
 
 import 'dart:math';
 
 import 'package:flutter/foundation.dart';
+import 'package:flutter/gestures.dart';
+import 'package:flutter/material.dart';
 import 'package:flutter/scheduler.dart';
 
-import 'constants.dart';
-import 'drag_details.dart';
-import 'events.dart';
-import 'recognizer.dart';
-import 'velocity_tracker.dart';
-
 export 'dart:ui' show PointerDeviceKind;
 
 export 'package:flutter/foundation.dart' show DiagnosticPropertiesBuilder;
 
-export 'drag.dart' show DragEndDetails, DragUpdateDetails;
-export 'drag_details.dart' show DragDownDetails, DragStartDetails, DragUpdateDetails, GestureDragDownCallback, GestureDragStartCallback, GestureDragUpdateCallback;
-export 'events.dart' show PointerDownEvent, PointerEvent, PointerPanZoomStartEvent;
-export 'recognizer.dart' show DragStartBehavior;
-export 'velocity_tracker.dart' show VelocityEstimate, VelocityTracker;
-
 enum _DragState {
   ready,
   possible,
@@ -54,7 +41,8 @@
 /// Signature for a function that builds a [VelocityTracker].
 ///
 /// Used by [DragGestureRecognizer.velocityTrackerBuilder].
-typedef GestureVelocityTrackerBuilder = VelocityTracker Function(PointerEvent event);
+typedef GestureVelocityTrackerBuilder = VelocityTracker Function(
+    PointerEvent event);
 
 /// Recognizes movement.
 ///
@@ -89,10 +77,12 @@
     super.allowedButtonsFilter = _defaultButtonAcceptBehavior,
   });
 
-  static VelocityTracker _defaultBuilder(PointerEvent event) => VelocityTracker.withKind(event.kind);
+  static VelocityTracker _defaultBuilder(PointerEvent event) =>
+      VelocityTracker.withKind(event.kind);
 
   // Accept the input if, and only if, [kPrimaryButton] is pressed.
-  static bool _defaultButtonAcceptBehavior(int buttons) => buttons == kPrimaryButton;
+  static bool _defaultButtonAcceptBehavior(int buttons) =>
+      buttons == kPrimaryButton;
 
   /// Configure the behavior of offsets passed to [onStart].
   ///
@@ -290,6 +280,10 @@
   late OffsetPair _finalPosition;
   Duration? _lastPendingEventTimestamp;
 
+  OffsetPair get initialPosition => _initialPosition;
+  OffsetPair get pendingDragOffset => _pendingDragOffset;
+  OffsetPair get finalPosition => _finalPosition;
+
   /// When asserts are enabled, returns the last tracked pending event timestamp
   /// for this recognizer.
   ///
@@ -317,6 +311,7 @@
   /// If drag is only allowed along a defined axis, this value may be negative to
   /// differentiate the direction of the drag.
   late double _globalDistanceMoved;
+  double get globalDistanceMoved => _globalDistanceMoved;
 
   /// Determines if a gesture is a fling or not based on velocity.
   ///
@@ -330,7 +325,8 @@
   /// A fling calls its gesture end callback with a velocity, allowing the
   /// provider of the callback to respond by carrying the gesture forward with
   /// inertia, for example.
-  DragEndDetails? _considerFling(VelocityEstimate estimate, PointerDeviceKind kind);
+  DragEndDetails? _considerFling(
+      VelocityEstimate estimate, PointerDeviceKind kind);
 
   Offset _getDeltaForDetails(Offset delta);
   double? _getPrimaryValueFromOffset(Offset value);
@@ -339,7 +335,8 @@
   ///
   /// The [PanGestureRecognizer] returns null.
   _DragDirection? _getPrimaryDragAxis() => null;
-  bool _hasSufficientGlobalDistanceToAccept(PointerDeviceKind pointerDeviceKind, double? deviceTouchSlop);
+  bool hasSufficientGlobalDistanceToAccept(
+      PointerDeviceKind pointerDeviceKind, double? deviceTouchSlop);
   bool _hasDragThresholdBeenMet = false;
 
   final Map<int, VelocityTracker> _velocityTrackers = <int, VelocityTracker>{};
@@ -379,7 +376,8 @@
     switch (_state) {
       case _DragState.ready:
         _state = _DragState.possible;
-        _initialPosition = OffsetPair(global: event.position, local: event.localPosition);
+        _initialPosition =
+            OffsetPair(global: event.position, local: event.localPosition);
         _finalPosition = _initialPosition;
         _pendingDragOffset = OffsetPair.zero;
         _globalDistanceMoved = 0.0;
@@ -425,13 +423,15 @@
   }
 
   void _recordMoveDeltaForMultitouch(int pointer, Offset localDelta) {
-    if (multitouchDragStrategy != MultitouchDragStrategy.averageBoundaryPointers) {
+    if (multitouchDragStrategy !=
+        MultitouchDragStrategy.averageBoundaryPointers) {
       assert(_frameTimeStamp == null);
       assert(_moveDeltaBeforeFrame.isEmpty);
       return;
     }
 
-    assert(_frameTimeStamp == SchedulerBinding.instance.currentSystemFrameTimeStamp);
+    assert(_frameTimeStamp ==
+        SchedulerBinding.instance.currentSystemFrameTimeStamp);
 
     if (_state != _DragState.accepted || localDelta == Offset.zero) {
       return;
@@ -509,7 +509,8 @@
   }
 
   Offset _resolveLocalDeltaForMultitouch(int pointer, Offset localDelta) {
-    if (multitouchDragStrategy != MultitouchDragStrategy.averageBoundaryPointers) {
+    if (multitouchDragStrategy !=
+        MultitouchDragStrategy.averageBoundaryPointers) {
       if (_frameTimeStamp != null) {
         _moveDeltaBeforeFrame.clear();
         _frameTimeStamp = null;
@@ -518,34 +519,47 @@
       return localDelta;
     }
 
-    final Duration currentSystemFrameTimeStamp = SchedulerBinding.instance.currentSystemFrameTimeStamp;
+    final Duration currentSystemFrameTimeStamp =
+        SchedulerBinding.instance.currentSystemFrameTimeStamp;
     if (_frameTimeStamp != currentSystemFrameTimeStamp) {
       _moveDeltaBeforeFrame.clear();
       _lastUpdatedDeltaForPan = Offset.zero;
       _frameTimeStamp = currentSystemFrameTimeStamp;
     }
 
-    assert(_frameTimeStamp == SchedulerBinding.instance.currentSystemFrameTimeStamp);
+    assert(_frameTimeStamp ==
+        SchedulerBinding.instance.currentSystemFrameTimeStamp);
 
     final _DragDirection? axis = _getPrimaryDragAxis();
 
-    if (_state != _DragState.accepted || localDelta == Offset.zero || (_moveDeltaBeforeFrame.isEmpty && axis != null)) {
+    if (_state != _DragState.accepted ||
+        localDelta == Offset.zero ||
+        (_moveDeltaBeforeFrame.isEmpty && axis != null)) {
       return localDelta;
     }
 
-    final double dx,dy;
+    final double dx, dy;
     if (axis == _DragDirection.horizontal) {
-      dx = _resolveDelta(pointer: pointer, axis: _DragDirection.horizontal, localDelta: localDelta);
+      dx = _resolveDelta(
+          pointer: pointer,
+          axis: _DragDirection.horizontal,
+          localDelta: localDelta);
       assert(dx.abs() <= localDelta.dx.abs());
       dy = 0.0;
     } else if (axis == _DragDirection.vertical) {
       dx = 0.0;
-      dy = _resolveDelta(pointer: pointer, axis: _DragDirection.vertical, localDelta: localDelta);
+      dy = _resolveDelta(
+          pointer: pointer,
+          axis: _DragDirection.vertical,
+          localDelta: localDelta);
       assert(dy.abs() <= localDelta.dy.abs());
     } else {
-      final double averageX = _resolveDeltaForPanGesture(axis: _DragDirection.horizontal, localDelta: localDelta);
-      final double averageY = _resolveDeltaForPanGesture(axis: _DragDirection.vertical, localDelta: localDelta);
-      final Offset updatedDelta = Offset(averageX, averageY) - _lastUpdatedDeltaForPan;
+      final double averageX = _resolveDeltaForPanGesture(
+          axis: _DragDirection.horizontal, localDelta: localDelta);
+      final double averageY = _resolveDeltaForPanGesture(
+          axis: _DragDirection.vertical, localDelta: localDelta);
+      final Offset updatedDelta =
+          Offset(averageX, averageY) - _lastUpdatedDeltaForPan;
       _lastUpdatedDeltaForPan = Offset(averageX, averageY);
       dx = updatedDelta.dx;
       dy = updatedDelta.dy;
@@ -559,16 +573,22 @@
     required _DragDirection axis,
     required Offset localDelta,
   }) {
-    final bool positive = axis == _DragDirection.horizontal ? localDelta.dx > 0 : localDelta.dy > 0;
-    final double delta = axis == _DragDirection.horizontal ? localDelta.dx : localDelta.dy;
-    final int? maxSumDeltaPointer = _getMaxSumDeltaPointer(positive: positive, axis: axis);
+    final bool positive = axis == _DragDirection.horizontal
+        ? localDelta.dx > 0
+        : localDelta.dy > 0;
+    final double delta =
+        axis == _DragDirection.horizontal ? localDelta.dx : localDelta.dy;
+    final int? maxSumDeltaPointer =
+        _getMaxSumDeltaPointer(positive: positive, axis: axis);
     assert(maxSumDeltaPointer != null);
 
     if (maxSumDeltaPointer == pointer) {
       return delta;
     } else {
-      final double maxSumDelta = _getSumDelta(pointer: maxSumDeltaPointer!, positive: positive, axis: axis);
-      final double curPointerSumDelta = _getSumDelta(pointer: pointer, positive: positive, axis: axis);
+      final double maxSumDelta = _getSumDelta(
+          pointer: maxSumDeltaPointer!, positive: positive, axis: axis);
+      final double curPointerSumDelta =
+          _getSumDelta(pointer: pointer, positive: positive, axis: axis);
       if (positive) {
         if (curPointerSumDelta + delta > maxSumDelta) {
           return curPointerSumDelta + delta - maxSumDelta;
@@ -589,7 +609,8 @@
     required _DragDirection axis,
     required Offset localDelta,
   }) {
-    final double delta = axis == _DragDirection.horizontal ? localDelta.dx : localDelta.dy;
+    final double delta =
+        axis == _DragDirection.horizontal ? localDelta.dx : localDelta.dy;
     final int pointerCount = _acceptedActivePointers.length;
     assert(pointerCount >= 1);
 
@@ -609,9 +630,9 @@
     assert(_state != _DragState.ready);
     if (!event.synthesized &&
         (event is PointerDownEvent ||
-         event is PointerMoveEvent ||
-         event is PointerPanZoomStartEvent ||
-         event is PointerPanZoomUpdateEvent)) {
+            event is PointerMoveEvent ||
+            event is PointerPanZoomStartEvent ||
+            event is PointerPanZoomUpdateEvent)) {
       final Offset position = switch (event) {
         PointerPanZoomStartEvent() => Offset.zero,
         PointerPanZoomUpdateEvent() => event.pan,
@@ -623,27 +644,41 @@
       _giveUpPointer(event.pointer);
       return;
     }
-    if ((event is PointerMoveEvent || event is PointerPanZoomUpdateEvent)
-        && _shouldTrackMoveEvent(event.pointer)) {
-      final Offset delta = (event is PointerMoveEvent) ? event.delta : (event as PointerPanZoomUpdateEvent).panDelta;
-      final Offset localDelta = (event is PointerMoveEvent) ? event.localDelta : (event as PointerPanZoomUpdateEvent).localPanDelta;
-      final Offset position = (event is PointerMoveEvent) ? event.position : (event.position + (event as PointerPanZoomUpdateEvent).pan);
-      final Offset localPosition = (event is PointerMoveEvent) ? event.localPosition : (event.localPosition + (event as PointerPanZoomUpdateEvent).localPan);
+    if ((event is PointerMoveEvent || event is PointerPanZoomUpdateEvent) &&
+        _shouldTrackMoveEvent(event.pointer)) {
+      final Offset delta = (event is PointerMoveEvent)
+          ? event.delta
+          : (event as PointerPanZoomUpdateEvent).panDelta;
+      final Offset localDelta = (event is PointerMoveEvent)
+          ? event.localDelta
+          : (event as PointerPanZoomUpdateEvent).localPanDelta;
+      final Offset position = (event is PointerMoveEvent)
+          ? event.position
+          : (event.position + (event as PointerPanZoomUpdateEvent).pan);
+      final Offset localPosition = (event is PointerMoveEvent)
+          ? event.localPosition
+          : (event.localPosition +
+              (event as PointerPanZoomUpdateEvent).localPan);
       _finalPosition = OffsetPair(local: localPosition, global: position);
-      final Offset resolvedDelta = _resolveLocalDeltaForMultitouch(event.pointer, localDelta);
+      final Offset resolvedDelta =
+          _resolveLocalDeltaForMultitouch(event.pointer, localDelta);
       switch (_state) {
         case _DragState.ready || _DragState.possible:
           _pendingDragOffset += OffsetPair(local: localDelta, global: delta);
           _lastPendingEventTimestamp = event.timeStamp;
           _lastTransform = event.transform;
           final Offset movedLocally = _getDeltaForDetails(localDelta);
-          final Matrix4? localToGlobalTransform = event.transform == null ? null : Matrix4.tryInvert(event.transform!);
+          final Matrix4? localToGlobalTransform = event.transform == null
+              ? null
+              : Matrix4.tryInvert(event.transform!);
           _globalDistanceMoved += PointerEvent.transformDeltaViaPositions(
-            transform: localToGlobalTransform,
-            untransformedDelta: movedLocally,
-            untransformedEndPosition: localPosition
-          ).distance * (_getPrimaryValueFromOffset(movedLocally) ?? 1).sign;
-          if (_hasSufficientGlobalDistanceToAccept(event.kind, gestureSettings?.touchSlop)) {
+                      transform: localToGlobalTransform,
+                      untransformedDelta: movedLocally,
+                      untransformedEndPosition: localPosition)
+                  .distance *
+              (_getPrimaryValueFromOffset(movedLocally) ?? 1).sign;
+          if (hasSufficientGlobalDistanceToAccept(
+              event.kind, gestureSettings?.touchSlop)) {
             _hasDragThresholdBeenMet = true;
             if (_acceptedActivePointers.contains(event.pointer)) {
               _checkDrag(event.pointer);
@@ -662,7 +697,10 @@
       }
       _recordMoveDeltaForMultitouch(event.pointer, localDelta);
     }
-    if (event case PointerUpEvent() || PointerCancelEvent() || PointerPanZoomEndEvent()) {
+    if (event
+        case PointerUpEvent() ||
+            PointerCancelEvent() ||
+            PointerPanZoomEndEvent()) {
       _giveUpPointer(event.pointer);
     }
   }
@@ -720,8 +758,9 @@
 
     _moveDeltaBeforeFrame.remove(pointer);
     if (_activePointer == pointer) {
-      _activePointer =
-        _acceptedActivePointers.isNotEmpty ? _acceptedActivePointers.first : null;
+      _activePointer = _acceptedActivePointers.isNotEmpty
+          ? _acceptedActivePointers.first
+          : null;
     }
   }
 
@@ -756,15 +795,19 @@
     _lastTransform = null;
     _checkStart(timestamp, pointer);
     if (localUpdateDelta != Offset.zero && onUpdate != null) {
-      final Matrix4? localToGlobal = transform != null ? Matrix4.tryInvert(transform) : null;
-      final Offset correctedLocalPosition = _initialPosition.local + localUpdateDelta;
+      final Matrix4? localToGlobal =
+          transform != null ? Matrix4.tryInvert(transform) : null;
+      final Offset correctedLocalPosition =
+          _initialPosition.local + localUpdateDelta;
       final Offset globalUpdateDelta = PointerEvent.transformDeltaViaPositions(
         untransformedEndPosition: correctedLocalPosition,
         untransformedDelta: localUpdateDelta,
         transform: localToGlobal,
       );
-      final OffsetPair updateDelta = OffsetPair(local: localUpdateDelta, global: globalUpdateDelta);
-      final OffsetPair correctedPosition = _initialPosition + updateDelta; // Only adds delta for down behaviour
+      final OffsetPair updateDelta =
+          OffsetPair(local: localUpdateDelta, global: globalUpdateDelta);
+      final OffsetPair correctedPosition =
+          _initialPosition + updateDelta; // Only adds delta for down behaviour
       _checkUpdate(
         sourceTimeStamp: timestamp,
         delta: localUpdateDelta,
@@ -825,8 +868,8 @@
     } else {
       details = _considerFling(estimate, tracker.kind);
       debugReport = (details != null)
-        ? () => '$estimate; fling at ${details!.velocity}.'
-        : () => '$estimate; judged to not be a fling.';
+          ? () => '$estimate; fling at ${details!.velocity}.'
+          : () => '$estimate; judged to not be a fling.';
     }
     details ??= DragEndDetails(
       primaryVelocity: 0.0,
@@ -834,7 +877,8 @@
       localPosition: _finalPosition.local,
     );
 
-    invokeCallback<void>('onEnd', () => onEnd!(details!), debugReport: debugReport);
+    invokeCallback<void>('onEnd', () => onEnd!(details!),
+        debugReport: debugReport);
   }
 
   void _checkCancel() {
@@ -848,10 +892,12 @@
     _velocityTrackers.clear();
     super.dispose();
   }
+
   @override
   void debugFillProperties(DiagnosticPropertiesBuilder properties) {
     super.debugFillProperties(properties);
-    properties.add(EnumProperty<DragStartBehavior>('start behavior', dragStartBehavior));
+    properties.add(
+        EnumProperty<DragStartBehavior>('start behavior', dragStartBehavior));
   }
 }
 
@@ -878,17 +924,21 @@
   @override
   bool isFlingGesture(VelocityEstimate estimate, PointerDeviceKind kind) {
     final double minVelocity = minFlingVelocity ?? kMinFlingVelocity;
-    final double minDistance = minFlingDistance ?? computeHitSlop(kind, gestureSettings);
-    return estimate.pixelsPerSecond.dy.abs() > minVelocity && estimate.offset.dy.abs() > minDistance;
+    final double minDistance =
+        minFlingDistance ?? computeHitSlop(kind, gestureSettings);
+    return estimate.pixelsPerSecond.dy.abs() > minVelocity &&
+        estimate.offset.dy.abs() > minDistance;
   }
 
   @override
-  DragEndDetails? _considerFling(VelocityEstimate estimate, PointerDeviceKind kind) {
+  DragEndDetails? _considerFling(
+      VelocityEstimate estimate, PointerDeviceKind kind) {
     if (!isFlingGesture(estimate, kind)) {
       return null;
     }
     final double maxVelocity = maxFlingVelocity ?? kMaxFlingVelocity;
-    final double dy = clampDouble(estimate.pixelsPerSecond.dy, -maxVelocity, maxVelocity);
+    final double dy =
+        clampDouble(estimate.pixelsPerSecond.dy, -maxVelocity, maxVelocity);
     return DragEndDetails(
       velocity: Velocity(pixelsPerSecond: Offset(0, dy)),
       primaryVelocity: dy,
@@ -898,8 +948,10 @@
   }
 
   @override
-  bool _hasSufficientGlobalDistanceToAccept(PointerDeviceKind pointerDeviceKind, double? deviceTouchSlop) {
-    return _globalDistanceMoved.abs() > computeHitSlop(pointerDeviceKind, gestureSettings);
+  bool hasSufficientGlobalDistanceToAccept(
+      PointerDeviceKind pointerDeviceKind, double? deviceTouchSlop) {
+    return _globalDistanceMoved.abs() >
+        computeHitSlop(pointerDeviceKind, gestureSettings);
   }
 
   @override
@@ -938,17 +990,21 @@
   @override
   bool isFlingGesture(VelocityEstimate estimate, PointerDeviceKind kind) {
     final double minVelocity = minFlingVelocity ?? kMinFlingVelocity;
-    final double minDistance = minFlingDistance ?? computeHitSlop(kind, gestureSettings);
-    return estimate.pixelsPerSecond.dx.abs() > minVelocity && estimate.offset.dx.abs() > minDistance;
+    final double minDistance =
+        minFlingDistance ?? computeHitSlop(kind, gestureSettings);
+    return estimate.pixelsPerSecond.dx.abs() > minVelocity &&
+        estimate.offset.dx.abs() > minDistance;
   }
 
   @override
-  DragEndDetails? _considerFling(VelocityEstimate estimate, PointerDeviceKind kind) {
+  DragEndDetails? _considerFling(
+      VelocityEstimate estimate, PointerDeviceKind kind) {
     if (!isFlingGesture(estimate, kind)) {
       return null;
     }
     final double maxVelocity = maxFlingVelocity ?? kMaxFlingVelocity;
-    final double dx = clampDouble(estimate.pixelsPerSecond.dx, -maxVelocity, maxVelocity);
+    final double dx =
+        clampDouble(estimate.pixelsPerSecond.dx, -maxVelocity, maxVelocity);
     return DragEndDetails(
       velocity: Velocity(pixelsPerSecond: Offset(dx, 0)),
       primaryVelocity: dx,
@@ -958,8 +1014,10 @@
   }
 
   @override
-  bool _hasSufficientGlobalDistanceToAccept(PointerDeviceKind pointerDeviceKind, double? deviceTouchSlop) {
-    return _globalDistanceMoved.abs() > computeHitSlop(pointerDeviceKind, gestureSettings);
+  bool hasSufficientGlobalDistanceToAccept(
+      PointerDeviceKind pointerDeviceKind, double? deviceTouchSlop) {
+    return _globalDistanceMoved.abs() >
+        computeHitSlop(pointerDeviceKind, gestureSettings);
   }
 
   @override
@@ -995,18 +1053,23 @@
   @override
   bool isFlingGesture(VelocityEstimate estimate, PointerDeviceKind kind) {
     final double minVelocity = minFlingVelocity ?? kMinFlingVelocity;
-    final double minDistance = minFlingDistance ?? computeHitSlop(kind, gestureSettings);
-    return estimate.pixelsPerSecond.distanceSquared > minVelocity * minVelocity
-        && estimate.offset.distanceSquared > minDistance * minDistance;
+    final double minDistance =
+        minFlingDistance ?? computeHitSlop(kind, gestureSettings);
+    return estimate.pixelsPerSecond.distanceSquared >
+            minVelocity * minVelocity &&
+        estimate.offset.distanceSquared > minDistance * minDistance;
   }
 
   @override
-  DragEndDetails? _considerFling(VelocityEstimate estimate, PointerDeviceKind kind) {
+  DragEndDetails? _considerFling(
+      VelocityEstimate estimate, PointerDeviceKind kind) {
     if (!isFlingGesture(estimate, kind)) {
       return null;
     }
-    final Velocity velocity = Velocity(pixelsPerSecond: estimate.pixelsPerSecond)
-        .clampMagnitude(minFlingVelocity ?? kMinFlingVelocity, maxFlingVelocity ?? kMaxFlingVelocity);
+    final Velocity velocity =
+        Velocity(pixelsPerSecond: estimate.pixelsPerSecond).clampMagnitude(
+            minFlingVelocity ?? kMinFlingVelocity,
+            maxFlingVelocity ?? kMaxFlingVelocity);
     return DragEndDetails(
       velocity: velocity,
       globalPosition: _finalPosition.global,
@@ -1015,8 +1078,10 @@
   }
 
   @override
-  bool _hasSufficientGlobalDistanceToAccept(PointerDeviceKind pointerDeviceKind, double? deviceTouchSlop) {
-    return _globalDistanceMoved.abs() > computePanSlop(pointerDeviceKind, gestureSettings);
+  bool hasSufficientGlobalDistanceToAccept(
+      PointerDeviceKind pointerDeviceKind, double? deviceTouchSlop) {
+    return _globalDistanceMoved.abs() >
+        computePanSlop(pointerDeviceKind, gestureSettings);
   }
 
   @override
